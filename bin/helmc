#!/usr/bin/env bash
# TedVo - 06/07/2023

##################################################################
# Script help build | publish helm-chart Gitlab Package Registry #
##################################################################

SCRIPT_DIR=$(cd -- "$(dirname -- "${BASH_SOURCE[0]}")" &>/dev/null || exit && pwd)

set -euo pipefail

handle_error() {
	echo "Error: $1"
	echo "Run 'helmc ${2:-} -h|--help' for usage."

	clean_up
	exit 1
}

clean_up() {
	cd "$SCRIPT_DIR" || exit
	rm -rf .temp/ &>/dev/null
}

usage() {
	cat <<EOS
  Shell script for build or publish helm chart package

  Usage:
  helmc [command]

  Available Commands:
    build       package chart
    publish     publish chart

  Flags:
    -h, --help                show brief help

  Example:
    helmc build -h
    helmc publish -h
EOS
}

usage_build() {
	cat <<EOS
  Build helm chart package

  Usage:
  helmc build [flags]

  Available Commands:

  Flags:
    -c, --chart-dir=DIR       specify a directory of chart path to store input in
    -o, --output-dir=DIR      specify a directory to store output in. Default is current dir
    -v                        set the version on the chart or using in Chart.yml

  Example:
    helmc build -c chart_dir -o output_dir -v v1.0.0
EOS
}

usage_publish() {
	cat <<EOS
  Publish helm chart package

  Usage:
  helmc publish [flags]

  Available Commands:

  Flags:
    -c, --chart-dir=DIR       specify a directory of chart path to store input in.
    -p                        specify a project id.
    -u                        username of publisher to gitlab registry.. What ever you want.
    -t                        token (access token) for gitlab registry. Must have permission write registry.
    -v                        set the version on the chart or using in Chart.yml

  Example:
    helmc publish -c #CHART# -o output_dir -p #GITLAB_PROJECT_ID# -t #TOKEN# -u #USERNAME# -v v1.0.0
EOS
}

parse_yaml() {
	local prefix=${2:-}
	local s='[[:space:]]*'
	local w='[a-zA-Z0-9_]*'
	# shellcheck disable=SC2155
	local fs="$(echo @ | tr @ '\034')"
	# shellcheck disable=SC1087
	sed -ne "s|^\($s\):|\1|" \
		-e "s|^\($s\)\($w\)$s:$s[\"']\(.*\)[\"']$s\$|\1$fs\2$fs\3|p" \
		-e "s|^\($s\)\($w\)$s:$s\(.*\)$s\$|\1$fs\2$fs\3|p" "$1" |
		awk -F"$fs" '{
      indent = length($1)/2;
      vname[indent] = $2;
      for (i in vname) {if (i > indent) {delete vname[i]}}
      if (length($3) > 0) {
         vn=""; for (i=0; i<indent; i++) {vn=(vn)(vname[i])("_")}
         printf("%s%s%s=\"%s\"\n", "'"$prefix"'",vn, $2, $3);
      }
   }'
}

build() {
	local chart_dir
	local output_dir
	local new_version

	while test $# -gt 0; do
		case "$1" in
		-h | --help)
			usage_build
			exit
			;;
		-c)
			shift
			if test $# -gt 0; then
				chart_dir=$1
			else
				handle_error "no input dir specified" "build"
			fi
			shift
			;;
		--chart-dir*)
			chart_dir="$(echo "$1" | sed -e 's/^[^=]*=//g')"
			shift
			;;
		-o)
			shift
			if test $# -gt 0; then
				output_dir=$1
			else
				handle_error "no output dir specified" "build"
			fi
			shift
			;;
		--output-dir*)
			output_dir="$(echo "$1" | sed -e 's/^[^=]*=//g')"
			shift
			;;
		-v)
			shift
			if test $# -gt 0; then
				new_version=$1
			fi
			shift
			;;
		*)
			echo "Error: unknown flag \"$1\""
			echo "Run 'helmc build -h' for usage."
			exit 1
			;;
		esac
	done

	test "$chart_dir" || handle_error "Error: chart input path is empty" "build"

	eval "$(parse_yaml "$chart_dir"/Chart.yaml)"
	local V=${new_version:=$version}

	echo "[Build] Chart packaging..."
	echo "[Build] $(helm package "$chart_dir" -d "${output_dir:=$SCRIPT_DIR}" --version "$V")"
}

publish() {
	local chart_dir
	local project_id
	local username
	local token
	local new_version

	while test $# -gt 0; do
		case "$1" in
		-h | --help)
			usage_publish
			exit
			;;
		-c)
			shift
			if test $# -gt 0; then
				chart_dir=$1
			else
				handle_error "no input dir specified" "publish"
			fi
			shift
			;;
		--chart-dir*)
			chart_dir="$(echo "$1" | sed -e 's/^[^=]*=//g')"
			shift
			;;
		-p)
			shift
			if test $# -gt 0; then
				project_id=$1
			fi
			shift
			;;
		-u)
			shift
			if test $# -gt 0; then
				username=$1
			else
				handle_error "no input username specified" "publish"
			fi
			shift
			;;
		-t)
			shift
			if test $# -gt 0; then
				token=$1
			else
				handle_error "missing token" "publish" "publish"
			fi
			shift
			;;
		-v)
			shift
			if test $# -gt 0; then
				new_version=$1
			fi
			shift
			;;
		*)
			echo "Error: unknown flag \"$1\""
			echo "Run 'helmc publish --help' for usage."
			exit 1
			;;
		esac
	done

	eval "$(parse_yaml "$chart_dir"/Chart.yaml)"
	local V=${new_version:=$version}

	echo "[Publish] Name: ${name:-}"
	echo "[Publish] Version: $V"

	# Gitlab Registry
	test "$project_id" || handle_error "unknow project Id." "publish"

	# Check Authenticate
	test "$username" || handle_error "missing username" "publish"

	echo "[Publish] Username: $username"

	test "$token" || handle_error "missing token" "publish"
	echo "[Publish] Token: ***"

	local gitlabURL="https://gitlab.com/api/v4/projects/$project_id/packages/helm/api/stable/charts"
	echo "[Publish] Url: $gitlabURL"

	local chartFileName="$name-$V"
	local chartForm="chart=@$chartFileName.tgz"

	local tempOutput=.temp/
	mkdir $tempOutput &>/dev/null

	build -c "$chart_dir" -o "$tempOutput" -v "$V"

	cd $tempOutput || exit

	echo "[Publish] Chart '$chartForm' publishing..."
	response=$(curl \
		--silent \
		--write-out '%{http_code}' \
		--output /dev/null \
		--request POST \
		--form "$chartForm" \
		--user "$username":"$token" \
		"$gitlabURL")

	case "$response" in
	200 | 201)
		echo "[Publish] $response Successfully!!!"
		clean_up
		exit
		;;
	404)
		handle_error "404 Registry not found" "publish"
		;;
	401)
		handle_error "401 Unauthorized" "publish"
		;;
	*)
		handle_error "Unknow eror. Erro-code=$response" "publish"
		;;
	esac
}

# Check helm command
if ! helm version &>/dev/null; then
	echo "\"helm\" could not be found. See: https://helm.sh/docs/intro/install/!"
	exit
fi

case "$1" in
"") ;;
-h | --help)
	usage
	exit
	;;
build)
	"$@"
	exit
	;;
publish)
	"$@"
	exit
	;;
*)
	handle_error "Unknow command"
	;;
esac
