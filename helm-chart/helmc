#! /usr/bin/env sh
package="helmc"
ROOT=$(pwd)

handle_error() {
  echo ""
  echo "Error: $1"
  echo "Run 'helmc $2 --help' for usage."

  clean_up
  exit 1
}

clean_up() {
  cd $ROOT
  rm -rf .temp/ &> /dev/null
}

global_help() {
  echo "Shell script for build or publish helm chart package"
  echo ""
  echo "Usage:"
  echo "helmc [command]"
  echo " "
  echo "Available Commands:"
  echo "  build       package chart"
  echo "  publish     publish chart"
  echo ""
  echo "Flags:"
  echo "  -h, --help                show brief help"
  echo "  -v                        set the version on the chart to this semver version"
  exit 0
}

build_help() {
  echo "Build helm chart package"
  echo ""
  echo "Usage:"
  echo "helmc build [flags]"
  echo ""
  echo "Available Commands:"
  echo ""
  echo "Flags:"
  echo "  -c, --chart-dir=DIR       specify a directory of chart path to store input in"
  echo "  -o, --output-dir=DIR      specify a directory to store output in. Default is current dir"
  exit 0
}

publish_help() {
  echo "Publish helm chart package"
  echo ""
  echo "Usage:"
  echo "helmc publish [flags]"
  echo ""
  echo "Available Commands:"
  echo ""
  echo "Flags:"
  echo "  -c, --chart-dir=DIR       specify a directory of chart path to store input in."
  echo "  -p                        specify a project id."
  echo "  -u                        username of publisher to gitlab registry.. What ever you want."
  echo "  -t                        token (access token) for gitlab registry. Must have permission write registry."
  echo "  -o, --output-dir=DIR      specify a directory to store output in. Default is current dir."
  exit 0
}

build_package() {
  if [ -z "$INPUT" ]; then
    echo ""
    echo "Error: chart input path is empty."
    echo "Run 'helmc --help' for usage."
    exit 1
  fi
  if [ -z "$OUTPUT" ]; then
    export OUTPUT=$(pwd)
    echo "[$PROCESS] No output. Using default: $OUTPUT"
  fi

  export CHART_VERSION=$(grep 'version:' $INPUT/Chart.yaml | tail -n1 | cut -c 10-)
  if [ -z "$VERSION" ]; then
    VERSION=$CHART_VERSION
  fi

  echo "[$PROCESS] Chart packaging..."
  echo "[$PROCESS] $(helm package $INPUT -d $OUTPUT --version $VERSION)"
}

publish_package() {
  export CHART_NAME=$(grep 'name:' $INPUT/Chart.yaml | tail -n1 | cut -c 7-)
  echo "[$PROCESS] Name: $CHART_NAME"

  export CHART_VERSION=$(grep 'version:' $INPUT/Chart.yaml | tail -n1 | cut -c 10-)
  if [ -z "$VERSION" ]; then
    VERSION=$CHART_VERSION
  fi
  echo "[$PROCESS] Version: $VERSION"

  # Gitlab Registry
  if [ -z "$PROJECT_ID" ]; then
    handle_error "unknow project Id." "publish" 
  fi

  # Check Authenticate
  if [ -z "$USER_NAME" ]; then
    handle_error "missing username" "publish"
  fi
  echo "[$PROCESS] Username: $USER_NAME"

  if [ -z "$TOKEN" ]; then
    handle_error "missing token" "publish"
  fi
  echo "[$PROCESS] Token: ***"

  export URL=https://gitlab.com/api/v4/projects/$PROJECT_ID/packages/helm/api/stable/charts
  echo "[$PROCESS] Url: $URL"

  export CHART_FILE_NAME="$CHART_NAME-$VERSION"
  export CHART_FORM="chart=@$CHART_FILE_NAME.tgz"

  mkdir .temp &> /dev/null
  OUTPUT=.temp/

  build_package

  echo "[$PROCESS] Chart '$CHART_FORM' publishing..."
  
  cd .temp/
  RESPONSE=$(curl \
     --silent \
     --write-out '%{http_code}' \
     --output /dev/null \
     --request POST \
     --form $CHART_FORM \
     --user $USER_NAME:$TOKEN \
     $URL)

  if [ $RESPONSE == 200 ] | [ $RESPONSE == 201 ]; then
    echo "[$PROCESS] $RESPONSE Successfully!!!"
  else
    if [ $RESPONSE == 404 ]; then
    handle_error "404 Registry not found" "publish"
    fi
    if [ $RESPONSE == 401 ]; then
      handle_error "401 Unauthorized" "publish"
    fi
    if [ $RESPONSE == 000 ]; then
      handle_error "error-code=$RESPONSE" "publish"
    fi
  fi
  clean_up
}

while test $# -gt 0; do
  case "$1" in
    -h|--help)
      global_help ;;
    build)
      shift
      export PROCESS="build"
      while test $# -gt 0; do
        case "$1" in
          -h|--help)
            build_help ;;
          -c)
            shift
            if test $# -gt 0; then
              export INPUT=$1
            else
              echo "[$PROCESS] no input dir specified"
              exit 1
            fi
            shift
            ;;
          --chart-dir*)
            export INPUT=`echo $1 | sed -e 's/^[^=]*=//g'`
            shift
            ;;
          -o)
            shift
            if test $# -gt 0; then
              export OUTPUT=$1
            else
              echo "[$PROCESS] no output dir specified"
              exit 1
            fi
            shift
            ;;
          --output-dir*)
            export OUTPUT=`echo $1 | sed -e 's/^[^=]*=//g'`
            shift
            ;;
          -v)
            shift
            if test $# -gt 0; then
              export VERSION=$1
            fi
            shift
            ;;
          *)
            echo "Error: unknown flag \"$1\" for \"helmc build\""
            echo "Run 'helmc build --help' for usage."
            exit 1
            break
            ;;
          esac
      done
      shift
      ;;
    publish)
      shift
      export PROCESS="publish"
      while test $# -gt 0; do
        case "$1" in
          -h|--help)
            publish_help ;;
          -c)
            shift
            if test $# -gt 0; then
              export INPUT=$1
            else
              echo "[$PROCESS] no input dir specified"
              exit 1
            fi
            shift
            ;;
          --chart-dir*)
            export INPUT=`echo $1 | sed -e 's/^[^=]*=//g'`
            shift
            ;;
          -p)
            shift
            if test $# -gt 0; then
              export PROJECT_ID=$1
            fi
            shift
            ;;
          -u)
            shift
            if test $# -gt 0; then
              export USER_NAME=$1
            else
              handle_error "no input username specified"
            fi
            shift
            ;;
          -t)
            shift
            if test $# -gt 0; then
              export TOKEN=$1
            else
              handle_error "missing token" "publish"
            fi
            shift
            ;;
          -v)
            shift
            if test $# -gt 0; then
              export VERSION=$1
            fi
            shift
            ;;
          *)
            echo "Error: unknown flag \"$1\" for \"helmc publish\""
            echo "Run 'helmc publish --help' for usage."
            exit 1
            break
            ;;
        esac
      done
      shift
      ;;
    *)
      echo "Error: unknown command \"$1\" for \"helmc\""
      echo "Run 'helmc --help' for usage."
      exit 1
      break
      ;;
  esac
done

# Check helm command
if ! helm version &> /dev/null; then
    echo "\"helm\" could not be found. See: https://helm.sh/docs/intro/install/!"
    exit
else
    echo "[$PROCESS] Running on helm version : $(helm version)"
fi

# Build check
if [ $PROCESS == "build" ]; then
  build_package
fi

# Publish check
if [ $PROCESS == "publish" ]; then
  publish_package
fi
